#!/bin/bash
set -euo pipefail

echo "üöÄ Iniciando entorno de desarrollo Zero Trust..."

# Verificar prerrequisitos
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker no est√° funcionando. Por favor, inicia Docker."
    exit 1
fi

# Funci√≥n para verificar puertos
check_port() {
    local port=$1
    local service=$2
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null; then
        echo "‚ö†Ô∏è Puerto $port ya est√° en uso ($service). ¬øContinuar? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Verificar puertos
check_port 8080 "Aplicaci√≥n"
check_port 5432 "PostgreSQL"
check_port 6379 "Redis"
check_port 9092 "Kafka"

# Levantar servicios de infraestructura
echo "üê≥ Iniciando servicios de infraestructura..."
docker-compose up -d postgres redis kafka zookeeper

# Esperar que los servicios est√©n listos
echo "‚è≥ Esperando que los servicios est√©n listos..."
sleep 15

# Verificar servicios
echo "üîç Verificando servicios..."

# PostgreSQL
until docker-compose exec -T postgres pg_isready -U zerotrust -d zerotrust; do
    echo "‚è≥ Esperando PostgreSQL..."
    sleep 2
done
echo "‚úÖ PostgreSQL listo"

# Redis
until docker-compose exec -T redis redis-cli --raw incr ping > /dev/null 2>&1; do
    echo "‚è≥ Esperando Redis..."
    sleep 2
done
echo "‚úÖ Redis listo"

echo "‚úÖ Todos los servicios est√°n listos!"

# Iniciar aplicaci√≥n
echo ""
echo "üèÉ Iniciando aplicaci√≥n Zero Trust..."
echo "üìù Logs de la aplicaci√≥n aparecer√°n a continuaci√≥n..."
echo ""
echo "üåê Endpoints disponibles:"
echo "  ‚Ä¢ Aplicaci√≥n: http://localhost:8080"
echo "  ‚Ä¢ Health: http://localhost:8080/api/health"
echo "  ‚Ä¢ Info: http://localhost:8080/api/info"
echo "  ‚Ä¢ H2 Console: http://localhost:8080/h2-console"
echo "  ‚Ä¢ Actuator: http://localhost:8080/actuator"
echo ""

# Iniciar aplicaci√≥n con perfil de desarrollo
./mvnw spring-boot:run -Dspring-boot.run.profiles=development
